 int dfs(int r,int c,vector<vector<int>>& matrix,vector<vector<int>>&dp){
        int n=matrix.size();
        int m=matrix[0].size();
        if(r<0 || c<0 || r>=n || c>=m)return 0;
        if(dp[r][c])return dp[r][c];
        int left=0,right=0,up=0,dwn=0;
        if(c-1>=0 && matrix[r][c-1]>matrix[r][c])left=1+dfs(r,c-1,matrix,dp);
        if(r-1>=0 && matrix[r-1][c]>matrix[r][c])up=1+dfs(r-1,c,matrix,dp);
        if(c+1<m && matrix[r][c+1]>matrix[r][c])right=1+dfs(r,c+1,matrix,dp);
         if(r+1<n && matrix[r+1][c]>matrix[r][c])dwn=1+dfs(r+1,c,matrix,dp);
         return  dp[r][c]=(up+dwn+left+right);
    }
    problem link
    https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/description/
