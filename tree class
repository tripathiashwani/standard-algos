#include <iostream>
#include <unordered_map>
using namespace std;

class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node(int x) {
        this->val = x;
        left = NULL;
        right = NULL;
    }
};



int main() {
    int n;
    cin >> n;
    if (n == 0) return 0; // No nodes to process

    int a, b;
    unordered_map<int, Node*> mp;
    Node* root = NULL;

    for (int i = 0; i < n - 1; ++i) {
        cin >> a >> b;

        if (mp.find(a) == mp.end()) {
            mp[a] = new Node(a);
            if (root == NULL) root = mp[a]; // Initialize root
        }
        if (mp.find(b) == mp.end()) {
            mp[b] = new Node(b);
        }

        // Decide whether to place b as left or right child of a
        if (mp[a]->left == NULL) {
            mp[a]->left = mp[b];
        } else {
            mp[a]->right = mp[b];
        }
    }

   // inorder(root);
    return 0;
}
